def solve(puzzle_input):
    grid = [[x for x in y] for y in puzzle_input.strip().split("\n")]

    # 0 == N, 2 == S, 3 == W, 1 == E
    directions = [0, 2, 3, 1]

    elves = set()
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if grid[y][x] == "#":
                elves.add((y, x))

    round = 0
    for round in range(10000):
        proposed = {}
        done = set()

        # first half
        for elf in elves:
            if all([
                (elf[0] + 1, elf[1]) not in elves,
                (elf[0] + 1, elf[1] + 1) not in elves,
                (elf[0], elf[1] + 1) not in elves,
                (elf[0] - 1, elf[1] + 1) not in elves,
                (elf[0] - 1, elf[1]) not in elves,
                (elf[0] - 1, elf[1] - 1) not in elves,
                (elf[0], elf[1] - 1) not in elves,
                (elf[0] + 1, elf[1] - 1) not in elves
            ]):
                done.add(elf)
            else:
                for i in range(5):
                    if i == 4:
                        done.add(elf)
                    dy, dx = 0, 0
                    direction = directions[(i + round) % 4]
                    if direction % 2 == 0:
                        dy = -1 if direction == 0 else 1
                    if direction % 2 == 1:
                        dx = -1 if direction == 3 else 1
                    spot = (elf[0] + dy, elf[1] + dx)
                    spot_left, spot_right = (
                        elf[0] + dy + dx, elf[1] + dx + dy), (elf[0] + dy - dx, elf[1] + dx - dy)
                    if all([spot_left not in elves, spot not in elves, spot_right not in elves]):
                        if spot not in proposed:
                            proposed[spot] = []
                        proposed[spot].append(elf)
                        break

        # second half
        new_elves = done
        for proposed_elf in proposed:
            if len(proposed[proposed_elf]) > 1:
                for elf in proposed[proposed_elf]:
                    new_elves.add(elf)
            else:
                new_elves.add(proposed_elf)
        elves = new_elves

        if round == 9:
            min_x, max_x, min_y, max_y = 99999999, 0, 99999999, 0
            for elf in elves:
                min_y = min(min_y, elf[0])
                max_y = max(max_y, elf[0])
                min_x = min(min_x, elf[1])
                max_x = max(max_x, elf[1])

            empty = 0
            for y in range(min_y, max_y + 1):
                for x in range(min_x, max_x + 1):
                    if (y, x) not in elves:
                        empty += 1
            print(empty)
        if len(proposed) == 0:
            break

    print(round + 1)

    return


solve('''
#...####...#.##.##.#..#####.########..#...#...#####.####.##.####....##
#....####.###.##.......##.....#.....##.#.#..###.#.....#......##.#.#.#.
..##..#.##.#.#.####.#.#..#.#..####.#.#....#.#.######.....##.#.#...#.##
.....####.#.##....#...##.#.##........##...#...##....#..#........######
#..#..#...#..#.#..####.##....#..#.##..###.##.#..#..####..#.#.#..#.#..#
........#.###....###.#.#...##....#..###.#....#.#..##.#.#.....####..#.#
....###.####...#....#.####.#..####...##.##..#...#.#.#...###.##.##..###
##..#..##..#..#.#...#..##..###.#.#.##.#.###..###.##.#.###..##.##.###.#
#..#..#...#.#.....##..##.###.....##...#..###......#.#.....#..#####....
##..#.###...###.###.#..##..##.###..#.#.#..#.###....##...###.#......##.
###....#####.#..#.###.....##.#.#.#######.....#.....#.##..####.#....###
###.#...#..#.#..#.....#.##.##.....#####....##.#..###...#.#.#.###..#.#.
.....####.#.#.##..#.#..#..#.#....###.##.#.##.#....##.#..#......#...###
##.#.#.##.#...#.#####.#####...###.###..#..#.##.#...#..##.###.#......#.
####.#..##.##..#.##.#.####....#.##.###..#.#.##..#.####..##...###..####
#######....##.#....##.###.#.##..#.###.##.#..##..#....##.##...##.##..#.
###..#....###...##.##..##..##.####.##.#...#.#....#.##..##..#..#...###.
.#.#######.##.#.###..##.#.##..#.####.#.#.#....#.#.###.#.##....##.###.#
##...#....#..###.#..#.#....#.##.#.#######.#####...##...###..##.#..####
...##.#...##.#.##...#.##..###....#.##..#..#.###..#.##..##.##..#####...
#...###......##.####.###.....#.#..###.#.##..##.###...........#..#.#...
.#..##..###..##.##.##########..###..#.#..#.#.#.#.........##.##..####.#
#.#...####.####....#...#..#.##..#..#.#######..#..#......#.#####..#.##.
....##.#.#....#......##...#.##.#.#.#.#.####.#..#.##.#.###....#....##.#
####.#.###.#..#.######.##.####.#.#.##.#..##.#.#.#...#..####..#.#..####
.....##.#...#...#...#.#.........####...######..####.##..##......##..#.
...##.#.###..#.#.....#.#..#.##...####.####....##...###...##..#..##.##.
..##.##.#.##..######.########.###.###...##..##.#.....#.###.######..##.
#.#.#.#####.....#...#.#..##.#..#..#####.###...##..#.##..###.#.#..#####
.##.....##.###.###.#.#.##....##.#..#.#.###.#......#..#.##........#####
#..##.###.#.#.#.#.#.#.##....#.##...##.#....#.###.#.##.###..###.####..#
....##......##...##..#......#..#.#....#.##.#.#...##.#...#..#.....#....
#.###.#####.##.....#.#.###....#.###.#..#######......#.#.#...###.#..###
##########...####.#.###..#.#.##..####.#.#....#.####.#..#.##.....##.#.#
..#..#####..##.#..#.....#####...##..#....#..###.#....#.#......####.##.
##...#.##...#####.####.##..#..##..##...#######.#.##...#####.###...#.##
#..##.#..#.#######...##..##.#.##.####..##.#.###..####....#..###...##..
.#.#..#.#....#####.##....#.#..#.#..#.##.#.##..#....###.##...##.#...###
.##.#.##.##.#.#..#.#.###....#####..#..###..#..#.##.##.####..#..####...
#...#####.#...#..#..###.#.##....##...#....###.###.##.#.#.##.##.#.###.#
...##...####...#..#.......##......#.#...#.##.#..#..########.##.##...#.
#####.##..#..##..#.....##...##..##..##......####..#.##.#..##..#.##..#.
##.#....####.#.#..####...#.####..#.##...##.#..#..#....#.#.#....#.##..#
...#.#.#.####.#..#.####..#.##.##.#####.###.###.#...##...#..##..###....
.#....###....##..#....#.........#.#....##.####...##..#.##.#..#.###.###
.#.###.#.#..###.....###.##...####..#...#.#..##.#######...####.#..##...
##........#.##.#..#.##..######.#..#...#.#.#..##...##.#..#.####.....#.#
#####.#....#..#.#.#.###...#..#..##....####..##..#..#.#.....#.#..#####.
...###.######.##.##.##.#.....##....##.#.#..#.###.#.####..####.#...#.##
.#..####.###.#..##.....#.#...#.##..#..#.####.##....##.#####...##.#.###
###.....#.#.###.#.#.####.#.#..#.###...####.....#...##..#.#...#...####.
#.#.##.###......####..#.#..##.#..#.##.#..#.#.##.#.###...##.##.##.#.#.#
..#.##.#..####.####..##...#..#....####....###.##########.##..##..####.
.#....##.#...#.#.######.####.###.....##..####......###.####.#####.....
.#..##.......####....##.#####..##..##.###.###..######.#.####...#..#...
#..#.######...#..####..#.#.....#..####.#...#.###..#.##.##..#.#..##.#.#
....#.#...#..#..#..##..##.###...#.#.##.#..##..########.#.#######.##.##
.#...#.#.###....#.######..####..#..#.#####...#.##....#.####...#.##...#
.#.##....##...##...#.....#..#####.###.##..###....#....#..##..####.###.
..###.#....##.##.##.#.##.##.#.#..#.#####..####..###..###.####.#.##.##.
#...###.#...##..#.........#####..#..##.####..##.###..#.##...###..#..#.
#..#.....###.#.###....#######..#...#.##.##.#.#..#.....###.#...#####.##
..######.#..#...#.#....##.#...#######.#.#.#.#....#..#.##.#.##..#.#####
###..###..#.#...#....#.##.###..#..##..#.###.#.#....####..#...##...###.
....#.###..#..###....#.##...####....#####........##.#####....#.....##.
##...#....###...........#.....#....###...#...#.#.#...####.####.....#.#
##.##.##.#.#..##.###...####.#..#.##.......#...#..#.##.......##.#.#.##.
.#..##.###.#.####.###.#.#.......######....#..#......#..##...#..#..#.##
#..####.....###..#####..####..######.##.#.##.###..#..#.##.#.#.##.#..##
#.#.#.#..#.#.#.#.###.....######......#...###.#.#######....#.###...#..#
''')
