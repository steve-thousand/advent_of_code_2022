import heapq


def traverse(space, s, e, t=0):
    d = abs(s[0] - e[0]) + abs(s[1] - e[1])

    starting_state = ((t, d), t, d, s)
    v = set([(t, s)])
    q = [starting_state]
    while(q):
        _, t, d, c = heapq.heappop(q)
        if d == 0:
            return t

        for i in [(c[0], c[1]), (c[0] - 1, c[1]), (c[0], c[1] + 1), (c[0] + 1, c[1]), (c[0], c[1] - 1)]:
            if i[0] >= 0 and i[0] < len(space) and space[i[0]][i[1]] != '#' and (t + 1, i) not in v:

                b = False
                for y in range(1, len(space) - 1):
                    if space[y][i[1]] == '^' and (y - 1 - (t + 1)) % (len(space) - 2) == i[0] - 1:
                        b = True
                        break
                    if space[y][i[1]] == 'v' and (y - 1 + (t + 1)) % (len(space) - 2) == i[0] - 1:
                        b = True
                        break

                if b:
                    continue

                for x in range(1, len(space[0]) - 1):
                    if space[i[0]][x] == '<' and (x - 1 - (t + 1)) % (len(space[0]) - 2) == i[1] - 1:
                        b = True
                        break
                    if space[i[0]][x] == '>' and (x - 1 + (t + 1)) % (len(space[0]) - 2) == i[1] - 1:
                        b = True
                        break

                if b:
                    continue

                v.add((t + 1, i))
                new_d = abs(i[0] - e[0]) + abs(i[1] - e[1])
                q.append(((t + 1, new_d), t + 1, new_d, i))

        heapq.heapify(q)


def solve(puzzle_input):
    space = [[x for x in y] for y in puzzle_input.strip().split("\n")]
    s = (0, 1)
    e = (len(space) - 1, len(space[0]) - 2)

    t = traverse(space, s, e)
    print(t)

    t = traverse(space, e, s, t)
    t = traverse(space, s, e, t)
    print(t)

    return


solve('''
#.########################################################################################################################
#>v>^>^<<^>v^>vv<.><>v^>vvv><.>^^.<.^>^vv>v^v>.>>>.v^>>^<v<v<.<<>v^v<^>^<<v>^<<v>><>^v<.^v^^v<v>>>^<.v<^^v>^^<>><v^v^<.v.#
#.>.^<.>^<v<.v>v^<^>>^v^>v>v<.v>v^v.>^><>v<>.^v><>.<v^>.v<<^..>^<<^<<>vv^<v<><v<^^>>v^><.>v<v<^>^^^^>..<<><>>^>^^<.>>v...#
#<<.><<<v^vv^<>>..<<>>>^<.<v^..vv><^vv^^<^<>>v<^>.<>^>v<>^>v><v^>v^>v><>>v^>vv>v^v>.>^v<^<^><^vv<^v>v^^v^.^<>v.^<>^.>v>v<#
#<^v^^><^^<^<v^^<^^<>.<^<v>v..<v^^vvv<>><v^.<>>><>v>^v>v<v.v.vv<vv<>><>><^^<vv>.>>.<>>^>v>^v.>.><<<<>^>^>v>v>^><^^v<^vv<>#
#>><<v<>>>^^^<v^<><<>^^^<^>^v^v<^>>v.><<<<.>>^.<v^>v>^<<^<^^>^><^<>.<>vv^<v<v^<^^<v><v^vv^><.<^.^<v^^>v><^<<^^<vv^><v^v>>#
#<>>^^>vvvvv.><>>^<v^>>v^^<<>^>vv^<^^^<^v<<v^<>v^v<^>>v^vv^<>^<>^<v^v^>v<.vv<<.<vvv<><<^^^v<^<v^^v<^^v>>vv^<.>v<.v^v^vv^.#
#.>v>.>^<>v>>.^vvv<^<^><<^^>.<<v<v^>>v<<<^.<>>>v<v>>^>><>v<^>.v^.^v>v^<>><>><^.v><.>v<>^<^^>v>>v^^v^<<v>v<v>.v.^>^^^^<><>#
#>v<^^><^>.>^^^>vvv><v>>vv<v^<><^>^>^v>^><.v<^<v<>^>^.><^^<v<<><<><v^^.<v^^v^^><.>v<.<^^v^v.v>^v<^<<v<.v>..<vv<>.v<^v<>.<#
#><v>.><..v>v>^^^^<.>.<^^><^>v^^^^.><<^^v.>v<^<>vv>>>><>vv>>><>>>v.^v>>^vv<^<.>^>^><<>v^.<>.v<<<.<<vv<.v^>^<v^<>><>>^v<><#
#<^v<>^<<v>^..vv>^<<><^^<<>^<^^^v^^<^^v<^>><vv^<v<vv<vv.>^v.>^><>>v.>v>>^^v<>>v<<v>.v^vv^><v^<^><^><>>^v<v<.>^<^vv>>>>v^<#
#<>>>^^^><v<>v<^v^v.>v^<^^>>>^^<v<^.v^>.^^><<v<>><><>v<<vv>.v<v^<^^v^<<<^.>>^v^^v.^<><<>vv^>>^<<vv<^>v>><^>^v<v<>v<<.<vv<#
#<.><^.<>v<>^v.<>^>v>v>>.^>^v>>^^v>^.v.>>v>v>vv.><.^>^><.vvv<<v.>^<vv>v>^<^^v.v<<^^>v^^vv^>^.<<<<vv<><><<v>.<v<<<<^v<v>^<#
#>v^v.><^>v>vv^<>.<^<<v^^^v>>><>.^.^>vvv>v.><.>v><v^vv^<v<v>><^>>vv<v>^>vv^>v.<v<>^v>^<vv>^^>^^.^<>.v<<vvv.<v<>v^v<v>^>v>#
#>>>^>v>^^<>>v>^vvv.>^vv^<v>.<>^vv>.<vv><..^^<<^.v<>^<<^.<>^v^^v.^>.^<^>>.>>v.<^^>v>>^<<^<<><<>>^^<^><<<>^.><<<>.vv>.>v^<#
#<.>>v>^<v<.^>><^v<^vv^>v^^<^^^^.>^v<<>^>.>>>vv<.^<>v^^<v><vv.^><<..^><v^v^vv>.>v>>>^>.^^^^<>>^<<>>^vv.<^>vv..><<<.>>>^>>#
#<vv>vv>v<>^<^<^^v.v^>><>><<<.><<^<.>^>v^><>.<<^<^vv><<.>^v<.<>^>vvv>v^.^<<vv>^>>^>><^^<v.<..^..><.v...v^.^^<.v>>v<^<v^><#
#>v^>v^>><>>v><v<v>>.vvv<<^v<^^^.v<<^>.vvv<>>^.v^v.>>>>^>><>.<.><.<^>v>^<^.><^>><<^<v^>vv^>v<>^v.v<^>.<v>v<>v.><>>><.^.^<#
#.v>^v>^v<.^.>^.<^>^>>v<v>>vv<^<<^.<v^>v^^.<v^<.v^^>^<>v^^vv.v..>>vvv<vv<><<><^<vv<v^.^<^v^^vv^>>v<v<<^v<vvv>>>..>>^>.^>>#
#<vvv>>^>>^<vv><>^>><v<v<><>^<^<<^><^<v<.^v<^v^v><<>>>.<>^>^.>.<.>v<.><^><><<<>v^>vv^^..>vv.^>>.<>vv<^v>v>><>^>^^.>v<v<.<#
#>.^^<<..v<<^>>^.^vv<>vv>v^><<v^.vv^<^>>^v<vv.>v>^>>.>^.^.v<<<.^v<>v^<^<>><><>^<v^<<>v^^v>^v.v<v^>>^..<^v<>.>..^^.>^v<v>>#
#><.^v<vv>>.>^<.v<>.<<^>.<>>v^v>^>^^>>^>>>v><>v>>.>>vv.<vvvvvv>v<>.^^<>>>vv^>v..<>^<^>v<>><v^>.>v.^v>.^v>.<v><.>^<<<v>^>.#
#>^>>^vv>vv<^<^<<<>v>v>^^<^^<.>^<>vv<>^>v>>^^^^^<>^>>>v.v^>v<.^<>.v^<v>^^.>vvvv^>>v.^<v<^^>.^^^.^vv^<vv^v<vv<v^>^v^.^^.v>#
#<<^v.>>>v>^<^<.vv>vv^^^.<v^^<v^vvvv^^>^<^<<^vv.^^>.<>^.^..<>v>v^>v>><^>^^^vv<^>v>>>v>^^>^><^^>vv^>.<>^^v^<v^.><v>^^>^v>>#
#<vv><>.v<>.>^v^<v><^.<<<>v^.^><v>v><.<v^><><v<^.>vv<^^v^>v><.^...v>>^<<^><>><v^>><<v^vvv>^^>>.><<vv<v<^v<>>>>^v^>v<v>v<<#
#<.^^>^.^^>>>^<^^^^<<.>^<<<.>>>.>^<v^v>^v.>vv^..^.>.>>.<^^^v>^^vv<<>^v.>>>>^><>><v>v^v<>^^<<v^<<.vv.>^v.v^v^.>vvv..>v.>^>#
########################################################################################################################.#
''')
